---
title: "OSCER and BASH, BASH and OSCER"
author: 
  - name: Eleana Cabello
date: 06/02/2025
---
# Setting the Stage

![](../images/terminal.png){width=700}

- **Terminal** - A text-based user interface that allows users to interact with a computer by typing commands
- **Directory** - A folder location in your computer
- **Working Directory** - The current directory a user is in
- **Path** - Directions to a folder or file
- **Command** - BASH command to accomplish a task i.e. creating file, removing file, etc. 
- **Command Flag** - Modifications to a command to consider


# BASH Programming
## Common Commands
### Navigating Directories

```{.bash}
pwd       # Print wokring directory
```

```{.bash}
ls        # List contents in a directory
ls -lh    # List contents in a directory in a list format and human read able sizes
```

```{.bash}
tree      # List directory and file tree
```

```{.bash}
cd SOME_DIR     # Change working directory to the entered directory 
cd ..           # Change working directory to parent directory of current directory
cd ~            # Change working directory to home
```

### Creating, Moving, and Deleting Directories

```{.bash}
mkdir SOME_DIR    # Create directory
```

```{.bash}
rmdir SOME_DIR    # Remove Directory
rm -r SOME_DIR    # Remove Directory
```

```{.bash}
mv ONE_DIR TWO_DIR # Move directory to new directory 
```

### Creating, Deleting, Copying, and Moving Files

```{.bash}
touch SOME_FILE.txt                   # Create new file
touch SOME_FILE.txt SOME_FILE.txt     # Create several new files
```

```{.bash}
rm foo.txt                        # Remove file
```

```{.bash}
cp SOME_FILE.txt SOME_FILE.txt    # Copy file to new directory
mv SOME_FILE.txt SOME_FILE.txt    # Move file to new directory
```

## Piping

```{.bash}
CMD1 SOME_FILE.txt | CMD2         # Structure
```

```{.bash}
ls SOME_DIR | grep "R1"           # Example
```

## Standard Output

```{.bash}
echo "some string"                # Print to screen
```

```{.bash}
CMD SOME_FILE.txt > NEW_FILE.txt            # Overwrite file with output
CMD SOME_FILE.txt >> ADD_TO_EXISTING.txt    # Take output and add output to existing content in file
```

```{.bash}
CMD SOME_FILE.txt 1> stdout.txt           # Redirect the standard output to a file
CMD SOME_FILE.txt 2> stderror.txt        # Redirect the standard error output to a file
```

## File Editing

```{.bash}
nano                    # Opens text editor to create new file
nano file.txt            # Opens file in text editor
```

## Find in Files

```{.bash}
grep "some-string" SOME_FILE.txt    # Grabs lines in file that contain the string pattern
```

# Examples

```{.bash}
grep "some-string" SOME_FILE.txt    # Grabs lines in file that contain the string pattern
```

# Batch Scripting
## Structure

```{.bash}
#!/usr/bin/bash -l
#SBATCH --partition=sooner_test
#SBATCH --container=el9hw
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --mem=30G
#SBATCH --time=15:00:00
#SBATCH --chdir=/scratch/jrada
#SBATCH --output=gallus_%J_stdout.txt
#SBATCH --error=gallus_%J_stderr.txt

#==============================================================================
# BASH Strict mode (i.e. "fail fast" to reduce hard-to-find bugs)
set -e          # EXIT the script if any command returns non-zero exit status.
set -E          # Make ERR trapping work inside functions too.
set -u          # Variables must be pre-defined before using them.
set -o pipefail # If a pipe fails, returns the error code for the failed pipe
                #  even if it isn't the last command in a series of pipes.
#==============================================================================


```




